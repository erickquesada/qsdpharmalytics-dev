version: '3.8'

services:
  # ================================
  # 1. POSTGRESQL DATABASE
  # ================================
  postgres:
    image: postgres:15-alpine
    container_name: pharmalitics_postgres_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backups:/backups:rw
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - pharmalitics_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # ================================
  # 2. REDIS CACHE
  # ================================
  redis:
    image: redis:7-alpine
    container_name: pharmalitics_redis_prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_prod_data:/data
    ports:
      - "6379:6379"
    networks:
      - pharmalitics_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # ================================
  # 3. FASTAPI APPLICATION
  # ================================
  api:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: pharmalitics_api_prod
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - PYTHONPATH=/app
    volumes:
      - ./reports:/app/reports:rw
      - ./logs:/app/logs:rw
      - ./backups:/app/backups:rw
      - ./uploads:/app/uploads:rw
    ports:
      - "8000:8000"
    networks:
      - pharmalitics_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # ================================
  # 4. NGINX REVERSE PROXY
  # ================================
  nginx:
    image: nginx:alpine
    container_name: pharmalitics_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx:rw
      - ./static:/var/www/static:ro
    networks:
      - pharmalitics_network
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # 5. PGADMIN (Interface PostgreSQL)
  # ================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pharmalitics_pgadmin_prod
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    volumes:
      - pgadmin_prod_data:/var/lib/pgadmin
      - ./pgadmin/servers.json:/pgadmin4/servers.json:ro
    ports:
      - "8080:80"
    networks:
      - pharmalitics_network
    depends_on:
      - postgres
    profiles:
      - admin  # Opcional: só sobe com --profile admin

  # ================================
  # 6. BACKUP SERVICE (CRON)
  # ================================
  backup:
    build:
      context: .
      dockerfile: Dockerfile.backup
    container_name: pharmalitics_backup_prod
    restart: unless-stopped
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - BACKUP_DIR=/backups
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS}
    volumes:
      - ./backups:/backups:rw
      - ./logs:/app/logs:rw
    networks:
      - pharmalitics_network
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - backup  # Opcional: só sobe com --profile backup

  # ================================
  # 7. PROMETHEUS (MÉTRICAS)
  # ================================
  prometheus:
    image: prom/prometheus:latest
    container_name: pharmalitics_prometheus_prod
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_prod_data:/prometheus
    networks:
      - pharmalitics_network
    profiles:
      - monitoring  # Opcional: só sobe com --profile monitoring

  # ================================
  # 8. GRAFANA (DASHBOARDS)
  # ================================
  grafana:
    image: grafana/grafana:latest
    container_name: pharmalitics_grafana_prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=GrafanaAdmin2024!
    volumes:
      - grafana_prod_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - pharmalitics_network
    depends_on:
      - prometheus
    profiles:
      - monitoring  # Opcional: só sobe com --profile monitoring

# ================================
# VOLUMES PERSISTENTES
# ================================
volumes:
  postgres_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  
  redis_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  
  pgadmin_prod_data:
    driver: local
  
  prometheus_prod_data:
    driver: local
  
  grafana_prod_data:
    driver: local

# ================================
# NETWORK
# ================================
networks:
  pharmalitics_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
