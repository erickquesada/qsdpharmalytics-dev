services:
  # ================================
  # 1. POSTGRESQL DATABASE
  # ================================
  postgres:
    image: postgres:15-alpine
    container_name: pharmalitics_postgres_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./backups:/backups:rw
    ports:
      - "5432:5432"
    networks:
      - pharmalitics_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ================================
  # 2. REDIS CACHE
  # ================================
  redis:
    image: redis:7-alpine
    container_name: pharmalitics_redis_prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - ./data/redis:/data
    ports:
      - "6379:6379"
    networks:
      - pharmalitics_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # 3. FASTAPI APPLICATION
  # ================================
  api:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: pharmalitics_api_prod
    restart: unless-stopped
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
      - PYTHONPATH=/app
    volumes:
      - ./reports:/app/reports:rw
      - ./logs:/app/logs:rw
      - ./backups:/app/backups:rw
      - ./uploads:/app/uploads:rw
    ports:
      - "8000:8000"
    networks:
      - pharmalitics_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ================================
  # 4. NGINX REVERSE PROXY
  # ================================
  nginx:
    image: nginx:alpine
    container_name: pharmalitics_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./logs/nginx:/var/log/nginx:rw
    networks:
      - pharmalitics_network
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# ================================
# NETWORKS
# ================================
networks:
  pharmalitics_network:
    driver: bridge
